#!/usr/bin/env python3
"""
Script de configuration et d'initialisation pour ArXiv Search Engine
"""

import subprocess
import sys
import os
from pathlib import Path

def install_requirements():
    """Installe les d√©pendances Python"""
    print("üì¶ Installation des d√©pendances Python...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ D√©pendances install√©es avec succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation: {e}")
        return False

def check_ollama():
    """V√©rifie si Ollama est install√© et accessible"""
    print("üîç V√©rification d'Ollama...")
    try:
        result = subprocess.run(["ollama", "list"], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Ollama est accessible")
            print("Mod√®les install√©s:")
            print(result.stdout)
            return True
        else:
            print("‚ùå Ollama n'est pas accessible")
            return False
    except FileNotFoundError:
        print("‚ùå Ollama n'est pas install√©")
        return False

def install_ollama_models():
    """Installe les mod√®les Ollama n√©cessaires"""
    models = ["nomic-embed-text", "gemma2:2b"]
    
    for model in models:
        print(f"üì• Installation du mod√®le {model}...")
        try:
            subprocess.check_call(["ollama", "pull", model])
            print(f"‚úÖ Mod√®le {model} install√©")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors de l'installation du mod√®le {model}: {e}")
            return False
    
    return True

def create_directories():
    """Cr√©e les dossiers n√©cessaires"""
    dirs = ["data", "chroma_db"]
    for dir_name in dirs:
        path = Path(dir_name)
        path.mkdir(exist_ok=True)
        print(f"üìÅ Dossier {dir_name} cr√©√©/v√©rifi√©")

def run_initial_ingestion():
    """Lance une ingestion initiale de test"""
    print("üöÄ Lancement de l'ingestion initiale...")
    try:
        from ingestion import ArxivIngestion
        ingestion = ArxivIngestion()
        
        # Ingestion de quelques articles de test
        added = ingestion.quick_ingest(
            topics=["machine learning", "deep learning"], 
            max_per_topic=25
        )
        print(f"‚úÖ {added} documents ajout√©s lors de l'ingestion initiale")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ingestion: {e}")
        return False

def main():
    print("üî¨ Configuration d'ArXiv Search Engine")
    print("="*50)
    
    # √âtape 1: Cr√©er les dossiers
    create_directories()
    
    # √âtape 2: Installer les d√©pendances Python
    
    if not install_requirements():
        print("‚ùå √âchec de l'installation des d√©pendances")
        sys.exit(1)
    
    # √âtape 3: V√©rifier Ollama
    if not check_ollama():
        print("\n‚ö†Ô∏è  Ollama n'est pas install√© ou accessible.")
        print("Veuillez installer Ollama depuis: https://ollama.ai")
        print("Puis relancez ce script.")
        sys.exit(1)
    
    # √âtape 4: Installer les mod√®les Ollama
    if not install_ollama_models():
        print("‚ùå √âchec de l'installation des mod√®les Ollama")
        sys.exit(1)
    
    # √âtape 5: Ingestion initiale (optionnelle)
    choice = input("\nü§ñ Voulez-vous lancer une ingestion initiale de test ? (y/N): ")
    if choice.lower() in ['y', 'yes', 'o', 'oui']:
        run_initial_ingestion()
    
    print("\nüéâ Configuration termin√©e avec succ√®s!")
    print("\nPour lancer l'application:")
    print("streamlit run app.py")

if __name__ == "__main__":
    main()




POC ---explication des termes suivants :
data warehouse , data marts , data lake , database 


-Mod√®le de Tableau , Graphique , Visualization d√©j√† realis√© par la cgrae 
-Acc√®s aux sources de donn√©es,
-